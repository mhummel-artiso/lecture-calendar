version: '3.9'

volumes:
  redisinsight:

services:
  calendar.api:
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      #               protocol://user:password@host:port
      MONGODB_SERVER: mongodb://root:${MASTER_PW}@localhost:27017
      MONGODB_DB_NAME: lecture-calendar
      POSTGRESQL_HOST: localhost      
      POSTGRESQL_USER_NAME: ${POSTGRES_USER}
      POSTGRESQL_USER_PASSWORD: 74RuqICjDPQEFREmhIFaqRf6H
      OIDC_URL: http://localhost:8080/realms/Calendar
      OIDC_SWAGGER_CLIENT_SECRET: hiTq3F2ALbOiray4ZH4Kq0ON3GVTkHjR
      OIDC_SWAGGER_REDIRECT_URL: http://localhost:5057/swagger/index.html
      JWT_AUDIENCE: http://localhost:8080/realms/Calendar
      JWT_AUTHORITY: http://localhost:8080/realms/Calendar
      JWT_METADATA_ADDRESS: http://localhost:8080/realms/Calenda
      TZ: Europe/Berlin

  client:
    environment:
     TZ: Europe/Berlin
  
  mongodb:
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: ${MASTER_PW}
      TZ: Europe/Berlin
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo mongo:27017/test --quiet 1
      interval: 10s
      timeout: 10s
      retries: 5
  mongo-express:
    image: mongo-express
    ports:
        - '8081:8081'
    depends_on:
      - mongodb
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongodb
      - ME_CONFIG_MONGODB_PORT=27017
      # - ME_CONFIG_MONGODB_ENABLE_ADMIN=false
      # - ME_CONFIG_MONGODB_AUTH_DATABASE=root
      - ME_CONFIG_MONGODB_AUTH_USERNAME=root
      - ME_CONFIG_MONGODB_AUTH_PASSWORD=${MASTER_PW}
      - ME_CONFIG_BASICAUTH_USERNAME=root
      - ME_CONFIG_BASICAUTH_PASSWORD=${MASTER_PW}
    networks:
      - backend
  # add new client https://developers.redhat.com/blog/2020/01/29/api-login-and-jwt-token-generation-using-keycloak#set_up_a_client
  # while import errors  https://howtodoinjava.com/devops/keycloak-script-upload-is-disabled/
  keycloak:
    command:
      - "--verbose"
      - "start-dev"
      - "--import-realm"
      - "--features=token-exchange"
      # - "--https-key-store-file=/etc/x509/https/tls.jks"
      # - "--https-key-store-password=${MASTER_PW}"
    environment:
      TZ: Europe/Berlin
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: ${MASTER_PW}
      KC_HEALTH_ENABLED: true
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgressdb/keycloak
      KC_DB_USERNAME: ${POSTGRES_USER}
      KC_DB_PASSWORD: ${MASTER_PW}
    # healthcheck:
    #   test: ["CMD", "curl --fail -s http://localhost:8080/health | jq 'select((.status == \"UP\") or (.checks[].status == \"UP\"))'"]
    #   interval: 30s
    #   timeout: 3s
    #   start_period: 10s
    #   retries: 10

  postgressdb:
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-q","-U", "${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      TZ: Europe/Berlin
      PGUSER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${MASTER_PW}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: keycloak
  
  seq:
    environment:
      ACCEPT_EULA: Y
      TZ: Europe/Berlin