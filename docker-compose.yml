# start container: docker compose up -d --build
# stop container: docker compose down

# Set environments, labels, volumes, healthchecks and commands in docker-compose.override.yml

version: "3"

services:
# loadbalancer
  nginx:
    container_name: loadbalancer
    image: nginx:latest
    restart: ${RESTART_POLICY}
    ports:
      - 80:80
    networks:
      - frontend
    depends_on:
      - calendarapi
      - grafana
      - client
      - keycloak

# calendar api
  calendarapi:
    build:
      context: src/calendar-backend
      dockerfile: Calendar.Api/Dockerfile
    depends_on:
      mongodb:
        condition: service_healthy
      keycloak:
        condition: service_healthy
      grafana:
        condition: service_healthy
    restart: ${RESTART_POLICY}
    networks:
      - backend-api
      - backend-keycloak
      - backend-monitoring
      - frontend
    deploy:
      mode: replicated
      replicas: 3

# calendar client
  client:
    build: 
      context: ./src/calendar-client
      dockerfile: Dockerfile
    restart: ${RESTART_POLICY}
    networks:
      - frontend
    deploy:
      mode: replicated
      replicas: 3

# keycloak authentication
  keycloak:
    build:
      context: ./config/keycloak
      dockerfile: Dockerfile
    image: lecture-calendar-keycloak
    restart: ${RESTART_POLICY}
    depends_on:
      postgressdb-keycloak:
        condition: service_healthy
    networks:
      - frontend
      - backend-keycloak
      - backend-monitoring
    deploy:
      mode: replicated
      replicas: 2

# databases
  mongodb:
    image: mongo
    restart: ${RESTART_POLICY}
    networks:
      - backend-api
    # ports:
    #   - 27017:27017

  postgressdb-keycloak:
    image: "postgres:alpine3.18"
    restart: ${RESTART_POLICY}
    networks:
      - backend-keycloak

  postgressdb-grafana:
    image: postgres:alpine3.18
    restart: ${RESTART_POLICY}
    networks:
      - backend-monitoring

# monitoring
  grafana:
    image: grafana/grafana-oss
    restart: ${RESTART_POLICY}
    depends_on:
      promtail:
        condition: service_started
      postgressdb-grafana:
        condition: service_healthy
    networks:
      - frontend
      - backend-monitoring
    deploy:
      mode: replicated
      replicas: 3

  prometheus:
    image: prom/prometheus
    restart: ${RESTART_POLICY}
    depends_on:
      mongodb-exporter:
        condition: service_started
      postgressdb-grafana-exporter:
        condition: service_started
      postgressdb-keycloak-exporter:
        condition: service_started
      keycloak:
        condition: service_healthy
      grafana:
        condition: service_healthy
    networks:
      - backend-monitoring
    ports:
      - "9090:9090"

# DB exporter
  mongodb-exporter:
    image: percona/mongodb_exporter:0.39
    restart: ${RESTART_POLICY}
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - backend-monitoring
      - backend-api

  postgressdb-grafana-exporter:
    image: prometheuscommunity/postgres-exporter
    restart: ${RESTART_POLICY}
    depends_on:
      postgressdb-grafana:
        condition: service_healthy
    networks:
      - backend-monitoring

  postgressdb-keycloak-exporter:
    image: prometheuscommunity/postgres-exporter
    restart: ${RESTART_POLICY}
    depends_on:
      postgressdb-keycloak:
        condition: service_healthy
    networks:
      - backend-keycloak
      - backend-monitoring

# logging
  loki:
    image: grafana/loki
    restart: ${RESTART_POLICY}
    networks:
      - backend-monitoring

  promtail:
    image: grafana/promtail
    restart: ${RESTART_POLICY}
    depends_on:
      - loki
    networks:
      - backend-monitoring

volumes:
  mongodb-data:
    driver: local
  postgress-data:
    driver: local
  grafana-data:
    driver: local

networks:
  backend-api:
  backend-monitoring:
  backend-keycloak:
  frontend: